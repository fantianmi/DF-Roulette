/* variables */
const BET_AMOUNT = 0; /* 0,01 ether, around $6 */
const GAS = 95145;
const GAS_PRICE = 5000000000;
const bets = [];
let contract;
let lastPosition = 0;
let wheelSpinCounter = 0;
let firstBetAfterSpin = true;
let web3Provider = null;
let lastBlockEvent = 0;
let isConnected = false;
let isApprove = false;
let winnings = 0;
let timeUntilNextSpin = "";

const coincontractAddress = "0x36D2e2B7780fBD937c1CA18F359916E4afB6Baa0"
const rouletteAddress = "0x5EE86Df4816A1b23e1F1D5D2c3Cf811015e4B96C"
let currentAccount = "";
let coincontract;

updateConnectWalletUI(true)

const betTypes = [
  'color', 'column', 'dozen',
  'eighteen', 'modulus', 'number'
];

function showWarning(msg) {
  var p = document.getElementById('warning');
  p.innerHTML = msg;
  p.style.display = 'block';
}

function init() {
  return initWeb3();
}

function initWeb3() {


  // ethereum.enable();
  // 创建一个 web3 实例，设置一个“provider” • 为了保证我们的 MetaMask 设置好的 provider 不被覆盖掉，在引入 web3 之前我们一般要做当前环境检查（以v0.20.1为例）：
  if (typeof web3 !== 'undefined') {
    web3Provider = web3.currentProvider;
  } else {
    // If no injected web3 instance is detected, fall back to Ganache
    web3Provider = new Web3.providers.HttpProvider('http://localhost:7545');
  }
  web3 = new Web3(web3Provider);
  console.log(web3);
  console.log(web3.eth.accounts[0])
  // web3.isConnected
  initContract();
  //if (web3.isConnected) return initContract();


  //showWarning('You need <a href="https://metamask.io/">Metamask</a> installed and connected to the ropsten network');
}

function initContract() {
  // get abi and deployed address
  console.log("initContract")
  $.getJSON('js/Roulette_v1.json', (data) => {
    //console.log(web3)
    web3.eth.net.getId((err, netId) => {
      console.log(netId);
      switch (netId) {
        case 1: // main network
          showWarning("You're on the Ethereum main network. Please switch to BinanceSmartChain.");
          break
        case 2: // morden
          showWarning("You're on the Morden test network. Please switch to BinanceSmartChain.");
          break
        case 3: // ropsten
          showWarning("You're on the Ropsten test network. Please switch to BinanceSmartChain.");
          break
        case 4: // rinkeby
          showWarning("You're on the Rinkeby test network. Please switch to BinanceSmartChain.");
          break
        case 42: // kovan
          showWarning("You're on the Kovan test network. Please switch to BinanceSmartChain.");
          break
        case 56:
          address = rouletteAddress;
          break;
        default: // unknown network, should be ganache
          console.log('This is an unknown network.');
          address = data.networks[netId].address;
      }
      const abi = data;
      console.log(abi)
      contract = new web3.eth.Contract(abi, address);
      console.log(contract)
      updateUI();

      //设置默认用户地址
      web3.eth.getAccounts(function (err, res) {
        let address = res[0];
        web3.eth.defaultAccount = address;
      });
      return initEventListeners();

    });



  });

  //     console.log(data)
  //     const abi = data.abi;

  //     let wallet = {
  //       from: '0x1234567890123456789012345678901234567891', // 默认交易发送地址
  //       gasPrice: GAS_PRICE // 以 wei 为单位的默认 gas 价格，当前价格为 20 gwei
  //     }
  //     contract = new web3.eth.Contract(abi,address,wallet);
  //     console.log(web3.eth.accounts)
  //     updateUI();
  //     return initEventListeners();
  // });
}

function initEventListeners() {
  console.log(contract)
  /* listening for events from the smart contract */
  const event = contract.events.RandomNumber({}, (err, res) => {
    if (res.blockNumber > lastBlockEvent) {
      /* prevent duplicated events */
      /* 'random' number generated by the smart contract */
      console.log("initEventListeners")
      console.log(res)
      const oneRandomNumber = parseInt(res.returnValues.number);
      /* increment spin counter */
      wheelSpinCounter += 1;
      /* get wheel element */
      var wheel = document.getElementById("wheel");
      /* reset wheel */
      wheel.style.transform = "rotate(" + lastPosition + "deg)";
      /* numbers in the wheel, ordered clockwise */
      var numbers = [
        0, 32, 15, 19, 4, 21, 2, 25, 17, 34, 6, 27,
        13, 36, 11, 30, 8, 23, 10, 5, 24, 16, 33, 1,
        20, 14, 31, 9, 22, 18, 29, 7, 28, 12, 35, 3, 26
      ];
      /* calculate how much do we need to rotate to have the random number chosen */
      var numberDegree = numbers.indexOf(oneRandomNumber) * 360 / numbers.length;
      /* add some rounds before to look like it's spinning */
      var numRoundsBefore = 3 * wheelSpinCounter;
      /* calculate total degrees we need to rotate */
      var totalDegrees = (numRoundsBefore * 360) + numberDegree;
      /* rotate the wheel */
      document.getElementById("wheel").style.transform = "rotate(-" + totalDegrees + "deg)";
      /* save position to be able to reset the wheel next time */
      lastPosition = numberDegree;
      /* show status on bets after wheel stops */
      setTimeout(function () {
        showBetsStatus(oneRandomNumber);
      }, 2000);
      lastBlockEvent = res.blockNumber;
    }
  });
}

function set_time(str) {
  var n = parseInt(str) * 1000;
  var D = new Date(n);
  var year = D.getFullYear(); //四位数年份

  var month = D.getMonth() + 1; //月份(0-11),0为一月份
  month = month < 10 ? ('0' + month) : month;

  var day = D.getDate(); //月的某一天(1-31)
  day = day < 10 ? ('0' + day) : day;

  var hours = D.getHours(); //小时(0-23)
  hours = hours < 10 ? ('0' + hours) : hours;

  var minutes = D.getMinutes(); //分钟(0-59)
  minutes = minutes < 10 ? ('0' + minutes) : minutes;

  // var seconds = D.getSeconds();//秒(0-59)
  // seconds = seconds<10?('0'+seconds):seconds;
  // var week = D.getDay();//周几(0-6),0为周日
  // var weekArr = ['周日','周一','周二','周三','周四','周五','周六'];

  var now_time = year + '-' + month + '-' + day + ' ' + hours + ':' + minutes;
  return now_time;
}

function showError(msg, err) {
  console.log(err);
  const p = document.getElementById('errorPanel');
  p.innerText = msg;
  setTimeout(function () {
    p.innerHTML = '&nbsp;';
  }, 4000);
}

function hideBets() {
  var div = document.getElementById('betsList');
  while (div.firstChild) {
    div.removeChild(div.firstChild);
  }
}

function cleanBets() {
  bets.length = 0;
  hideBets();
}

function placeBet() {
  if (!isApprove) {
    alert("请先授权合约")
    return;
  }
  let area = this.id;
  let bet = {};
  if (/^c\_\d/.test(area)) bet = {
    type: 0,
    value: parseInt(area.substr(2))
  };
  if (/^p\_\d/.test(area)) bet = {
    type: 1,
    value: parseInt(area.substr(2))
  };
  if (/^d\_\d/.test(area)) bet = {
    type: 2,
    value: parseInt(area.substr(2))
  };
  if (/^e\_\d/.test(area)) bet = {
    type: 3,
    value: parseInt(area.substr(2))
  };
  if (/^m\_\d/.test(area)) bet = {
    type: 4,
    value: parseInt(area.substr(2))
  };
  if (/^n\d\d/.test(area)) bet = {
    type: 5,
    value: parseInt(area.substr(1))
  };
  if (bet.hasOwnProperty('type') && bet.hasOwnProperty('value')) {
    const options = {
      value: 0,
      gas: GAS,
      gasPrice: GAS_PRICE
    };


    //personal.unlockAccount(web3.eth.defaultAccount)
    web3.eth.defaultAccount = web3.eth.accounts[0]
    console.log(bet.value)
    console.log(bet.type);
    console.log(options)
    console.log("contract:")
    console.log(contract)

    console.log(web3.eth.defaultAccount)
    var BN = web3.utils.BN;
    contract.methods.bet(bet.value, bet.type, new BN('1000000000000000000')).send({
      from: web3.eth.defaultAccount
    }, (err, res) => {
      if (err) return void showError('not enough money in the bank', err);
      console.log(res)
      console.log("let`s bet")
      pushBet(bet);
    });
  }
}

function pushBet(hash) {
  if (firstBetAfterSpin) cleanBets();
  firstBetAfterSpin = false;
  bets.push(hash);
  printBet(hash);
}

function printBet(hash) {
  const labelForNum = {
    color: {
      0: 'black',
      1: 'red'
    },
    column: {
      0: 'left',
      1: 'middle',
      2: 'right'
    },
    dozen: {
      0: '1st',
      1: '2nd',
      2: '3rd'
    },
    eighteen: {
      0: '1-18',
      1: '19-36'
    },
    modulus: {
      0: 'even',
      1: 'odd'
    }
  }
  const type = betTypes[hash.type];
  const value = type === 'number' ? hash.value : labelForNum[type][hash.value];
  const div = document.getElementById('betsList');
  const p = document.createElement('li');
  p.innerText = type + ' ' + value + ' ';
  if (hash.hasOwnProperty('status')) {
    p.innerText += (hash.status ? 'WIN' : 'LOST');
  }
  div.appendChild(p);
}

function showBetsStatus(num) {
  hideBets();
  bets.map(function (bet) {
    if (num === 0) {
      bet.status = (bet.type === 5 && bet.value === 0); // bet on 0
    } else {
      if (bet.type === 5) { // bet on number
        bet.status = (bet.value === num);
      }
      if (bet.type === 4) { // bet on modulus
        if (bet.value === 0) bet.status = (num % 2 === 0);
        if (bet.value === 1) bet.status = (num % 2 === 1);
      }
      if (bet.type === 3) { // bet on eighteen
        if (bet.value === 0) bet.status = (num <= 18);
        if (bet.value === 1) bet.status = (num >= 19);
      }
      if (bet.type === 2) { // bet on dozen
        if (bet.value === 0) bet.status = (num <= 12);
        if (bet.value === 1) bet.status = (num >= 13 && num <= 24);
        if (bet.value === 2) bet.status = (num >= 25);
      }
      if (bet.type === 1) { // bet on column
        if (bet.value === 0) bet.status = (num % 3 === 1);
        if (bet.value === 1) bet.status = (num % 3 === 2);
        if (bet.value === 2) bet.status = (num % 3 === 0);
      }
      if (bet.type === 0) { // bet on color
        if (num <= 10 || (num >= 20 && num <= 28)) {
          if (bet.value === 0) bet.status = (num % 2 === 0)
          if (bet.value === 1) bet.status = (num % 2 === 1)
        } else {
          if (bet.value === 0) bet.status = (num % 2 === 1)
          if (bet.value === 1) bet.status = (num % 2 === 0)
        }
      }
    }
    printBet(bet);
  })
}

function spinWheel() {
  if (!isApprove) {
    alert("请先授权合约")
    return;
  }
  if (!checkBet()) return;
  contract.methods.spinWheel().send({
    from: web3.eth.defaultAccount,
  }, (err, res) => {
    console.log(res)
    if (err) return void showError('to soon to play?', err);
    firstBetAfterSpin = true;
  });
}

function accountInfo() {
  console.log(contract)
  contract.methods.accountInfo(web3.eth.defaultAccount).call({}, function (err, res) {
    console.log(res)
    winnings = toEther(res[4])
    const now = Math.round(new Date() / 1000); // time until next spin
    console.log("now",now)
    let timeUntilNextSpin = res[2] - now < 0 ? 0 : (res[2] - now);

    updateHTML(timeUntilNextSpin, 'timeUntilNextSpin');


  });
}

function readBets() {

}

function checkBet() {
  console.log(bets)
  if (bets.length <= 0) {
    alert("请先下注")
    return false;
  }
  return true;
}

function connectWallet() {
  console.log("connect wallet request")
  try {
    //ethereum.request('eth_requestAccounts')
    ethereum.enable();
  } catch (error) {
    alert("用户取消授权");
    return;
  }
}

function cashOut() {
  contract.methods.cashOut().send({
    from: web3.eth.defaultAccount
  }, function (err, res) {
    console.log(res)
  })
}

function toEther(bigNum) {
  return (bigNum / 1000000000000000000).toFixed(2)
}

function updateHTML(value, elId) {
  const span = document.getElementById(elId);
  span.innerText = value;
}

function approveContract() {
  if (!isConnected) return false;
  $.getJSON('js/token.json', (data) => {
    const abi = data;
    var contract = new web3.eth.Contract(abi, coincontractAddress);

    var BN = web3.utils.BN;
    contract.methods.approve(rouletteAddress, new BN('115792089237316195423570985008687907853269984665640564039457584007913129639935')).send({
      from: web3.eth.defaultAccount
    }, (err, res) => {
      if (err) return void showError('not enough money in the bank', err);
      console.log(res)
      console.log("let`s bet")
    });
  });
}
/**
 * 检查是否approve操作
 * @param {} account 
 */
function allowance() {
  if (currentAccount == "" || currentAccount == null) return false;

  if (!isConnected) return false;
  $.getJSON('js/token.json', (data) => {
    const abi = data;
    var contract = new web3.eth.Contract(abi, coincontractAddress);
    console.log(contract)
    // methods.spinWheel()
    console.log("currentAccount", currentAccount)
    console.log("rouletteAddress", rouletteAddress)
    contract.methods.allowance(currentAccount, rouletteAddress).call({}, function (err, res) {
      console.log(res)

      if (res > 0) {
        isApprove = true;
        document.getElementById("approveContract").style.visibility = 'hidden';
      } else {
        document.getElementById("approveContract").style.visibility = 'visible';
      }
    });
  });
}

/* call smart contract to get status and update UI */
function getStatus() {
  //console.log(contract)

  contract.methods.getStatus().call({}, function (err, res) {
    if (err) return void showError('something went wrong with getStatus', err);
    let aux = res;
    console.log(JSON.stringify(aux))
    updateHTML(aux[0], 'betsCount'); // bets count
    aux[1] = toEther(aux[1]); // bets value
    updateHTML(aux[1], 'betsValue');
    aux[3] = toEther(aux[3]); // roulette balance
    updateHTML(aux[3], 'balance');
    // aux[4] = toEther(aux[4]); // winnings
    updateHTML(winnings, 'winnings');
    web3.eth.getAccounts(function (err, res) {
      console.log(res.length)


      if (res.length <= 0) {
        updateConnectWalletUI(true)
        isConnected = false;
      } else {
        updateConnectWalletUI(false)
        isConnected = true;
      }
      let address = res[0];
      if (typeof (address) != 'undefined') {
        console.log(address)
        updateHTML(address, 'yourAddress');
        currentAccount = address;
        web3.eth.getBalance(address, (err, balance) => { // player balance
          //console.log(balance)
          balance = toEther(balance);
          updateHTML(balance, 'yourBalance');
          accountInfo()
          allowance();
          console.log("is approve", isApprove)
        });
      }

    });


  });
}

function updateConnectWalletUI(status) {
  let notConnectedBox = document.getElementById("notConnected");
  let connectedBox = document.getElementById("connected");
  if (status) {
    connectedBox.style.visibility = 'hidden';
    notConnectedBox.style.visibility = 'visible';
  } else {
    connectedBox.style.visibility = 'visible';
    notConnectedBox.style.visibility = 'hidden';
  }
}

/* every second query smart contract for status */
function updateUI() {
  setInterval(function () {
    getStatus();
  }, 1000);
}

document.addEventListener('DOMContentLoaded', function () {
  /* adds click event to roulette table */
  var areas = document.getElementsByTagName('area');
  for (i = 0; i < areas.length; i++) {
    areas[i].onclick = placeBet;
  };
  init();
})